{{template "base" .}}

{{define "title"}}
Donation page
{{end}}

{{define "content" }}
<div class="row">
    <div class="col-md-6 offset-md-3">
        <h2 class="mt-3 text-center">Crypto Payment: </h2>
        <hr>
        <div class="alert alert-danger text-center d-none" id="card-messages"></div>

        <form action="" method="post"
            name="charge_form" id="charge_form"
            class="d-block needs-validation charge-form"
            autocomplete="off" novalidate="">

            <div class="mb-3">
                <label for="execute_amount" class="form-label">Amount</label>
                <input type="text" class="form-control" id="charge_amount"
                    required="" autocomplete="execute_amount-new">
            </div>

            <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Execute transaction</a>
            <div id="processing-payment" class="text-center d-none">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
{{end}}

{{define "js" }}
		<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    	<script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
    	<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
		<script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>

		<script type="text/javascript">
  		  window.addEventListener('load', async() => {
  		    if (window.ethereum) {
  		      window.web3 = new Web3(ethereum);
  		      try {
  		        await ethereum.enable();
  		        initPayButton()
  		      } catch (err) {
  		        $('#status').html('User denied account access', err)
  		      }
  		    } else if (window.web3) {
  		      window.web3 = new Web3(web3.currentProvider)
  		      initPayButton()
  		    } else {
  		      $('#status').html('No Metamask (or other Web3 Provider) installed')
  		    }
  		  })
  		  const initPayButton = () => {
  		    $('.pay-button').click(() => {
  		      // paymentAddress
  		      const paymentAddress = {{.MainnetAddress}};
  		      const amountEth = document.getElementById("execute_amount").value;
  		      web3.eth.sendTransaction({
  		        to: paymentAddress,
  		        value: web3.toWei(amountEth, 'ether')
  		      }, (err, transactionId) => {
  		        if (err) {
  		          console.log('Payment failed', err)
  		          $('#status').html('Payment failed')
  		        } else {
  		          console.log('Payment successful', transactionId)
  		          $('#status').html('Payment successful')
  		        }
  		      })
  		    })
  		  }
  		</script>
	
	
			{{/* <script src="cmd\web\templates\web3\web3-react-example\pages\_app.js"></script> */}}
			{{/* <script src="cmd\web\templates\web3\web3-react-example\pages\index.js"></script> */}}
			{{/* <script type="module">
			import { InjectedConnector } from '@web3-react/injected-connector'
			import { useWeb3React } from "@web3-react/core"
			import { useEffect } from "react"
			import { injected } from "../components/wallet/connectors"
			
			export const injected = new InjectedConnector({
				supportedChainIds: [1, 3, 4, 5, 42],
			})
	
			function MyApp({ Component, pageProps }) {
  			return (
    			<Web3ReactProvider getLibrary={getLibrary}>
    	  		<Component {...pageProps} />
    			</Web3ReactProvider>
 			 		)
				}
	
	
	
			function getLibrary(provider) {
  			return new Web3(provider)
			}
	
			export default function Home() {
			  const { active, account, library, connector, activate, deactivate } = useWeb3React()
	
			  async function connect() {
			    try {
			      await activate(injected)
			      localStorage.setItem('isWalletConnected', true)
			    } catch (ex) {
			      console.log(ex)
			    }
			  }
	
			  async function disconnect() {
			    try {
			      deactivate()
			      localStorage.setItem('isWalletConnected', false)
			    } catch (ex) {
			      console.log(ex)
			    }
			  }
	
			  useEffect(() => {
			    const connectWalletOnPageLoad = async () => {
			      if (localStorage?.getItem('isWalletConnected') === 'true') {
			        try {
			          await activate(injected)
			          localStorage.setItem('isWalletConnected', true)
			        } catch (ex) {
			          console.log(ex)
			        }
			      }
			    }
			    connectWalletOnPageLoad()
			  }, [])
	
			  return (
			    <div className="flex flex-col items-center justify-center">
			      <button onClick={connect} className="py-2 mt-20 mb-4 text-lg font-bold text-white rounded-lg w-56 bg-blue-600 hover:bg-blue-800">Connect to MetaMask</button>
			      {active ? <span>Connected with <b>{account}</b></span> : <span>Not connected</span>}
			      <button onClick={disconnect} className="py-2 mt-20 mb-4 text-lg font-bold text-white rounded-lg w-56 bg-blue-600 hover:bg-blue-800">Disconnect</button>
			    </div>
			  )
			}
	
			
				{{/* Solidity smart contract */}}
			</script> */}}
{{end}}